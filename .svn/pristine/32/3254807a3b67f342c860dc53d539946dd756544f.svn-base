<!DOCTYPE HTML>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <title>Placeholder</title>
    <script type="text/javascript" src="../syntaxhighlighter/scripts/shCore.js"></script>
    <script type="text/javascript" src="../syntaxhighlighter/scripts/shBrushJScript.js"></script>
    <link type="text/css" rel="stylesheet" href="../syntaxhighlighter/styles/shCoreDefault.css"/>
    <script type="text/javascript" src="../lib/Lass.1.0.js"></script>
    <script type="text/javascript" src="../lib/class.1.0.js"></script>
    <script type="text/javascript" src="../release/placeholder.1.2.min.js"></script>
    <style type="text/css">
        input{ padding:5px 3px; }
        strong{ color:red; }
        p{ font-family:\5FAE\8F6F\96C5\9ED1; }
    </style>
</head>
<body>
<h1>请在IE浏览器(或本身不支持HTML5 placeholder的浏览器)中查看对应的效果</h1>
<!-- 实例结构写在这里 -->
<p>input单个实例：</p>
<input type="text" id="demo" placeholder="input single" />
<pre  class="brush: js;">
    // single
    new Placeholder({ carrier : document.getElementById('demo') });
</pre>

<p>input无名称实例：</p>
<input type="text" placeholder="No id No Name Placeholder" />
<pre class="brush: js;">
    // noName
    new Placeholder({ carrier : document.getElementsByTagName('input')[1] });
</pre>

<p>一次传入多个input对象：</p>
<ul>
    <li><input type="text" id="demo1" placeholder="placeholder1" /></li>
    <li><input type="text" id="demo2" placeholder="placeholder2" /></li>
    <li><input type="text" id="demo3" placeholder="placeholder3" /></li>
    <li><input type="text" id="demo4" placeholder="placeholder4" /></li>
    <li><input type="text" id="demo5" placeholder="placeholder5" /></li>
</ul>
<pre class="brush: js;">
    // more
    new Placeholder({
        carrier : [
            document.getElementById('demo1'),
            document.getElementById('demo2'),
            document.getElementById('demo3'),
            document.getElementById('demo4'),
            document.getElementById('demo5')
        ]
    });
</pre>

<p>文本输入框textarea(建议不要用过长的暗注释，暂不支持动态改变的暗注释):</p>
<textarea id="txt" placeholder="textarea placeholder"></textarea>
<pre class="brush: js;">
    // textarea
    new Placeholder({ carrier : document.getElementById('txt') });
</pre>

<p>所有浏览器统一(通过设置config.control.unifieddisplay属性，使得所有浏览器显示方式统一)：</p>
<input type="text" id="all" placeholder="unifieddisplay" />
<pre class="brush: js;">
    // all show the same
    new Placeholder({
        carrier : document.getElementById('all'),
        control : { unifieddisplay : true }
    });
</pre>

<p>重置placeholder值：</p>
<input type="text" id="reset" placeholder="placeholder" />
<button id="resetButton">Modify</button>
<pre class="brush: js;">
    // reset placehold value
    var p = new Placeholder({ carrier : document.getElementById('reset') });
    <strong style="color:red;">// only trigger when value not the same with last value</strong>
    p.onchange(function() {
        alert('any body change the value! this is callback alert!');
    });
    document.getElementById('resetButton').onclick = function() {
        p.setPlaceholer('modify the placeholder!');
    };
</pre>

<p>自定义placeholder颜色和字体(<strong>only for unifieddisplay:true</strong>)：</p>
<input type="text" id="reStyle" placeholder="green & reFontFamily" />
<pre class="brush: js;">
    // reset color & fontFamily
    new Placeholder({
        carrier : document.getElementById('reStyle'),
        style : {
            color : 'green',
            fontFamily : 'Verdana'
        },
        control : { unifieddisplay : true }
    });
</pre>

<p>不一样的显隐方式，支持获焦消失或者输入消失</p>
<input type="text" id="focusHide" placeholder="focus Hide" />
<input type="text" id="inputHide" placeholder="input Hide" />
<input type="text" id="inputHide1" placeholder="input Hide1" />
<input type="text" id="inputHide2" placeholder="input Hide2" />
<pre class="brush: js;">
    new Placeholder({
        carrier : document.getElementById('focusHide'),
        control : { unifieddisplay : true }
    });

    new Placeholder({
        carrier : document.getElementById('inputHide'),
        control : {
            emMethod : 'input'
        }
    });

    new Placeholder({
        carrier : [
            document.getElementById('inputHide1'),
            document.getElementById('inputHide2')
            ],
        control : {
            emMethod : 'input'
        }
    });
</pre>

<p>模拟的Placeholder控制输入框的显隐很蛋疼？现在不用疼了，见如下方法：</p>
<button id="goNone">走你~~</button>
<button id="goBack">回来！！</button>
<input type="text" placeholder="艰难的暗注释= =!~" id="difficultPlaceholder">
<pre class="brush: js;">
    var df = new Placeholder({
        carrier : document.getElementById('difficultPlaceholder'),
        control : {
            unifieddisplay : true
        },
        style : {
            color : 'red'
        }
    });
    document.getElementById('goNone').onclick = function() {
        df.hide();
    }
    document.getElementById('goBack').onclick = function() {
        df.show();
    }
</pre>

<hr/>
<p style="font-weight:bold; color:red;">厌烦了上面的配置？一个页面要初始化多个对象？代码行数太多，不够精简？直接用1.1最新提供的方法<br>
    Placeholder.initPage(config)
    <a href="example_1.html">示例<a/>
</p>

<script type="text/javascript">
    SyntaxHighlighter.all();

    window.onload = function() {
        // single
        new Placeholder({ carrier : document.getElementById('demo') });

        // noName
        new Placeholder({ carrier : document.getElementsByTagName('input')[1] });

        // more
        new Placeholder({
            carrier : [
                document.getElementById('demo1'),
                document.getElementById('demo2'),
                document.getElementById('demo3'),
                document.getElementById('demo4'),
                document.getElementById('demo5')
            ]
        });

        // textarea
        new Placeholder({ carrier : document.getElementById('txt') });

        // all show the same
        new Placeholder({
            carrier : document.getElementById('all'),
            control : { unifieddisplay : true }
        });

        // reset placehold value
        var p = new Placeholder({ carrier : document.getElementById('reset') });
        p.onchange(function() {
            alert('any body change the value! this is callback alert!');
        });
        document.getElementById('resetButton').onclick = function() {
            p.setPlaceholer('modify the placeholder!');
        };

        // reset color & fontFamily
        new Placeholder({
            carrier : document.getElementById('reStyle'),
            style : {
                color : 'green',
                fontFamily : 'Verdana'
            },
            control : { unifieddisplay : true }
        });

        new Placeholder({
            carrier : document.getElementById('focusHide'),
            control : { unifieddisplay : true }
        });

        new Placeholder({
            carrier : document.getElementById('inputHide'),
            control : {
                emMethod : 'input'
            }
        });

        new Placeholder({
            carrier : [
                document.getElementById('inputHide1'),
                document.getElementById('inputHide2')
                ],
            control : {
                emMethod : 'input'
            }
        });

        var df = new Placeholder({
            carrier : document.getElementById('difficultPlaceholder'),
            control : {
                unifieddisplay : true
            },
            style : {
                color : 'red'
            }
        });
        document.getElementById('goNone').onclick = function() {
            df.hide();
        }
        document.getElementById('goBack').onclick = function() {
            df.show();
        }


    }
</script>
</body>
</html>