
/**
 * @name Array
 * @class
 * @type {Object}
 * @requires Lass
 * @requires Util
 */
(function() {
    var Array = this.Array = {};

    /**
     * check type of array
     * @param array
     * @public
     * @return {Boolean}
     */
    Array.isArray = function(array) {
        if (Object.prototype.toString.call(array) === '[object Array]') {
            return true;
        }
        return false;
    };

    /**
     * Array indexOf
     * @param items
     * @param value
     * @param start
     * @return {Number}
     */
    Array.indexOf = function(items, value, start){
        /*if(items.indexOf){
         return items.indexOf(value, start);
         }*/

        var ret = -1;
        var i = ((this.Util.type(start) === 'number' ? start : -1) + 1), len = items.length;
        for(; i < len; i++){
            if(items[i] === value){
                ret = i;
                break;
            }
        }

        return ret;
    };

    /**
     * 过滤数组重复项
     * @param arr
     * @return {Array}
     */
    Array.unique = function(arr){
        var ret = [];

        for(var i = 0, len = arr.length; i < len; i++){
            if(Array.indexOf(ret, arr[i]) === -1){
                ret.push(arr[i]);
            }
        }

        return ret;
    };
}.call(Lass));

